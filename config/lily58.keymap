/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        mhl: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <30 31 32 33 34 35 36 37 38 39 40 41>;
        };

        mhr: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11>;
        };

        td_tab: tap_dance_tab {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp TAB>, <&kp LA(LG(TAB))>;
        };

        td_grave: tap_dance_grave {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp GRAVE>, <&kp LG(GRAVE)>;
        };

        td_bspc: tap_dance_bspc {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp BSPC>, <&kp LC(BSPC)>;
        };

        td_esc: tap_dance_escape {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp ESC>, <&kp LA(F4)>;
        };

        td_semi: tap_dance_semi {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SEMI>, <&macro_cs_func>;
        };
    };

    combos {
        compatible = "zmk,combos";
        
        combo_gaming {
            timeout-ms = <50>;
            key-positions = <42 43>;
            bindings = <&tog 2>;
            layers = <0 2>;
        };
    };

    macros {
        macro_cs_func: cs_function {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&kp SEMI &kp RET &kp LBRC &kp RET &kp RBRC>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&td_esc    &kp N1  &kp N2        &kp N3       &kp N4    &kp N5                            &kp N6   &kp N7        &kp N8       &kp N9   &kp N0    &kp MINUS
&td_tab    &kp Q   &kp W         &kp E        &kp R     &kp T                             &kp Y    &kp U         &kp I        &kp O    &kp P     &kp EQUAL
&kp LSHFT  &kp A   &mhl LCTRL S  &mhl LALT D  &kp F     &kp G                             &kp H    &mhr RCTRL J  &mhr RALT K  &kp L    &td_semi  &kp SQT
&kp LCTRL  &kp Z   &kp X         &kp C        &kp V     &kp B      &kp LBKT     &kp RBKT  &kp N    &kp M         &kp COMMA    &kp DOT  &kp FSLH  &kp BSLH
                                 &kp LGUI     &kp LALT  &kp ENTER  &kp SPACE    &td_bspc  &kp DEL  &kp LC(BSPC)  &mo 1
            >;
        };

        sym_layer {
            bindings = <
&kp F1     &kp F2     &kp F3     &kp F4     &kp F5    &kp F6                       &kp F7     &kp F8     &kp F9     &kp F10   &kp F11    &kp F12
&td_grave  &kp EXCL   &kp AT     &kp HASH   &kp DLLR  &kp PRCNT                    &kp CARET  &kp AMPS   &kp STAR   &kp LPAR  &kp RPAR   &kp PLUS
&trans     &kp GRAVE  &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT                     &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT &kp COLON  &kp DQT
&trans     &none      &none      &none      &kp LT    &kp GT     &trans    &trans  &kp HOME   &kp PG_DN  &kp PG_UP  &kp END   &kp QMARK  &kp BSLH
                                 &trans     &trans    &trans     &trans    &trans  &trans     &trans     &trans
            >;
        };

        gaming_layer {
            bindings = <
&kp ESC    &kp N1     &kp N2  &kp N3    &kp N4  &kp N5                             &kp N6    &kp N7   &kp N8    &kp N9     &kp N0   &kp MINUS
&kp TAB    &kp GRAVE  &kp Q   &kp W     &kp E   &kp R                              &kp T     &kp Y    &kp U     &kp I      &kp O    &kp P
&kp LSHFT  &kp LSHFT  &kp A   &kp S     &kp D   &kp F                              &kp G     &kp H    &kp J     &kp K      &kp L    &kp SEMI
&kp LCTRL  &kp LCTRL  &kp Z   &kp X     &kp C   &kp V      &kp G        &trans     &kp B     &kp N    &kp M     &kp COMMA  &kp DOT  &kp FSLH
                              &kp LALT  &mo 3   &kp SPACE  &kp SPACE    &kp ENTER  &kp BSPC  &kp DEL  &kp LGUI
            >;
        };

        sub_gaming_layer {
            bindings = <
&kp ESC    &kp N6  &kp N7  &kp N8    &kp N9     &kp N0                          &trans  &trans  &trans  &trans  &trans  &trans
&kp TAB    &kp T   &kp Y   &kp U     &kp I      &kp O                           &trans  &trans  &trans  &trans  &trans  &trans
&kp LSHFT  &kp H   &kp J   &kp K     &kp L      &kp SEMI                        &trans  &trans  &trans  &trans  &trans  &trans
&kp LCTRL  &kp B   &kp N   &kp M     &kp COMMA  &kp DOT    &kp P        &trans  &trans  &trans  &trans  &trans  &trans  &trans
                           &kp LALT  &trans     &kp SPACE  &kp ENTER    &trans  &trans  &trans  &trans
            >;
        };
    };
};
